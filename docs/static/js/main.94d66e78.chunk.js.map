{"version":3,"sources":["content/ContentHeader.js","content/ContentCentral.js","content/ContentFooter.js","App.js","serviceWorker.js","index.js"],"names":["ContentHeader","diameter","react_default","a","createElement","className","style","width","height","this","TargetCircle","Component","ContentCentral","props","ContentFooter","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","value","_this2","settings","infinite","arrows","dots","speed","slidesToShow","slidesToScroll","rtl","beforeChange","current","next","setState","js_default","labelPrefix","maxValue","minValue","onChange","slider","slickGoTo","lib_default","assign","ref","App","bind","assertThisInitialized","slickNext","vertical","verticalSwiping","swipeToSlide","customPaging","i","onClick","c","src_content_ContentHeader","content_ContentCentral","src_content_ContentFooter","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.94d66e78.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './Content.css';\r\nimport './ContentHeader.css';\r\n\r\n\r\nclass ContentHeader extends Component {\r\n    \r\n\r\n    TargetCircle(diameter) {\r\n        return (\r\n            <span className='targetExternalCircle' style={{width: diameter, height: diameter}}><span className='targetInternalCircle'></span></span>\r\n        );\r\n    }\r\n    \r\n    render() {\r\n\r\n        return (\r\n            <div className='item itemHeader'>\r\n                <h1>Всегда ли цели терапии СД2 <br /> на поверхности?</h1>\r\n                <span className='targetOne'>{this.TargetCircle(\"50px\")}Цель по HbA1c</span>\r\n                <span className='targetTwo'>{this.TargetCircle(\"25px\")}Гипогликемия</span>\r\n                <span className='targetThree'>{this.TargetCircle(\"13px\")}СС риски</span>\r\n                <span className='targetFore'>{this.TargetCircle(\"13px\")}Осложнения СД</span>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ContentHeader;","import React from 'react';\r\nimport './Content.css';\r\nimport './ContentCentral.css';\r\n\r\n\r\nfunction ContentCentral(props) {\r\n    return (\r\n        <div className='item itemCentral'>\r\n            <h1>Основа терапии — <br/> патогенез СД2</h1>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ContentCentral;","import React, { Component } from 'react';\r\nimport './Content.css';\r\nimport './ContentFooter.css';\r\n\r\nimport Slider from 'react-slick';\r\n\r\nimport InputRange from 'react-input-range';\r\nimport 'react-input-range/lib/css/index.css';\r\n\r\n\r\nclass ContentFooter extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            value: 2\r\n        };\r\n    }\r\n    render() {\r\n        const settings = {\r\n            infinite: false,\r\n            arrows: false,\r\n            dots: false,\r\n            speed: 500,\r\n            slidesToShow: 1,\r\n            slidesToScroll: 1,\r\n            rtl: true,\r\n            beforeChange: (current, next) => this.setState({ value: next })\r\n        };\r\n\r\n        return (\r\n            <div className='item itemFooter'>\r\n                <div className='scroll'>\r\n                    <form>\r\n                        <InputRange\r\n                            labelPrefix='1998'\r\n                            maxValue={2}\r\n                            minValue={0}\r\n                            value={this.state.value}\r\n                            onChange={value => this.slider.slickGoTo(value)}\r\n                        />\r\n                    </form>\r\n                    <div className='years'>\r\n                        <span>1998</span>\r\n                        <span>2009</span>\r\n                        <span>2016</span>\r\n                    </div>\r\n                </div>\r\n                <Slider ref={slider => (this.slider = slider)} {...settings} className='slider sliderFooter'>\r\n                    <div className='itemFooterContent'>\r\n                        <h2>Звенья патогенеза СД2</h2>\r\n                        <div className=\"img img2016\"></div>\r\n                    </div>\r\n                    <div className='itemFooterContent'>\r\n                        <h2>Смертельный октет</h2>\r\n                        <div className=\"img img2009\"></div>\r\n                    </div>\r\n                    <div className='itemFooterContent'>\r\n                        <h2>Звенья патогенеза СД2</h2>\r\n                        <div className=\"img img1998\"></div>\r\n                    </div>\r\n                </Slider>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ContentFooter;","import React, { Component } from 'react';\nimport './App.css';\n\nimport Slider from 'react-slick';\nimport \"slick-carousel/slick/slick.css\";\nimport \"slick-carousel/slick/slick-theme.css\";\n\nimport ContentHeader from './content/ContentHeader'\nimport ContentCentral from './content/ContentCentral'\nimport ContentFooter from './content/ContentFooter'\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.next = this.next.bind(this);\n  }\n  next() {\n    this.slider.slickNext();\n  }\n\n  render() {\n    const settings = {\n      infinite: false,\n      speed: 500,\n      slidesToShow: 1,\n      slidesToScroll: 1,\n      vertical: true,\n      verticalSwiping: true,\n      swipeToSlide: true,\n      arrows: false,\n      dots: true,\n      customPaging: i => (\n        <div className=\"dots\">\n          {''}\n        </div>\n      )\n\n    };\n\n    return (\n      <div className=\"app\" >\n        <button className=\"buttonNext\" onClick={this.next}></button>\n        <Slider ref={c => (this.slider = c)} {...settings} className='slider'>\n          <ContentHeader />\n          <ContentCentral />\n          <ContentFooter />\n        </Slider>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}